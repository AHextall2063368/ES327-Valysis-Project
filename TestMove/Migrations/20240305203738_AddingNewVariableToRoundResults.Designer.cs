// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestMove;

#nullable disable

namespace TestMove.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20240305203738_AddingNewVariableToRoundResults")]
    partial class AddingNewVariableToRoundResults
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("TestMove.HPRoundResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadshotPercentageHP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundIdentifierHP")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RoundWinHP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("assistsHP")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("deathsHP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("killsHP")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("tradesHP")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("HPRoundResults");
                });

            modelBuilder.Entity("TestMove.NegativeEventsRoundResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanHeadshotPercentagePostNE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanHeadshotPercentagePreNE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanKASTPostNE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanKASTPreNE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("roundWinratePostNE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("roundWinratePreNE")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NegativeEventsRoundResults");
                });

            modelBuilder.Entity("TestMove.PositiveEventsRoundResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanHeadshotPercentagePostPE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanHeadshotPercentagePrePE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanKASTPostPE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("meanKASTPrePE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("roundWinratePostPE")
                        .HasColumnType("INTEGER");

                    b.Property<int>("roundWinratePrePE")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PositiveEventsRoundResults");
                });

            modelBuilder.Entity("TestMove.RoundResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadshotPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundIdentifier")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RoundWin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("abilitiesUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("assists")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("kills")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("trades")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RoundResults");
                });
#pragma warning restore 612, 618
        }
    }
}
